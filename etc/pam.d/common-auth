#
# /etc/pam.d/common-auth - authentication settings common to all services
#
# This file is included from other service-specific PAM config files,
# and should contain a list of the authentication modules that define
# the central authentication scheme for use on the system
# (e.g., /etc/shadow, LDAP, Kerberos, etc.).  The default is to use the
# traditional Unix authentication mechanisms.
#
# As of pam 1.0.1-6, this file is managed by pam-auth-update by default.
# To take advantage of this, it is recommended that you configure any
# local modules either before or after the default block, and use
# pam-auth-update to manage selection of other modules.  See
# pam-auth-update(8) for details.


# Authentication Stack

# required 	= ultimately die if failure	> keep falling down regardless 
# requisite 	= die if failure		> otherwise fall down
# sufficient 	= done if success		> otherwise fall down

# !!!!!!!!! WARNING - /usr/bin/screen does not work with multifactor. You will get locked out!

# Make sure rootcg skips non standard multifactor stacks. This is for root level daemons.

# Use environment variables
auth        required      pam_env.so

# Delay in micro seconds when a failure occurs 
# Mitigates brute force attacks
auth        required      pam_faildelay.so delay=2000000

# 1 - Standard Password Module
#      - Use this module as layer #1 for desktop machines
#      - Transient dev users should skip all  multifactor checks
auth    requisite	  pam_unix.so

# 2 - YubiKey Device Check
#      - Verify OATH/OTP with presence check hardware device
#      - Skip this auth stack if we are a root user
#auth    [success=1 default=ignore]     	pam_succeed_if.so quiet user ingroup root
#auth   	requisite			pam_yubico.so mode=challenge-response chalresp_path=/etc/75a6a
#auth		requisite			pam_u2f.so		# TODO: R&D Can not get FIDO2 pam libs compiled.  !!! Ideal solution. It is a public private key solution with the least moving parts.
#auth		requisite			pam_pkcs11.so debug	# TODO: R&D Can not get it to work with yubikey PIV / OpenPGP smart card

# 3 - GoogleAuth Device Check -
#      - Verify OTP code
#      - Skip this auth stack if we are a web or root user
auth   [success=1 default=ignore]     	pam_succeed_if.so quiet user ingroup root
auth   requisite		 	pam_google_authenticator.so debug echo_verification_code [authtok_prompt=Password: ] [secret=/etc/d7ed5/${USER}/k] no_strict_owner user=root allowed_perm=0600 

# 4 - PAM Access Check
#      - Record failures and keep dying, otherwise fall down
#      - Clear faillure records, keep falling down
#      - Reads /etc/security/access.conf|time.conf
#      - Allows or denies based on config. Whitelist users, enable a time based bank vault, etc.
#auth   requisite     pam_access.so
#auth   requisite     pam_time.so	# Only use for stringent business processes, such as day work only etc.
auth   requisite     pam_faillock.so authfail deny=25 unlock_time=600
auth   requisite     pam_faillock.so authsucc deny=25 unlock_time=600

# 5 - Group Check - Succeed - Must Login
#      - Log authentication success
#      - Keep falling until the user is in users group
auth   sufficient    pam_succeed_if.so audit user ingroup users

# 6 - Final Auth Gate Stack - Fail - Must Deny Access
#      - Reaching this final stack means we want to fail with a deny
auth   required      pam_deny.so

# prime the stack with a positive return value if there isn't one already;
# this avoids us returning an error just because nothing sets a success code
# since the modules above will each just jump around
auth	required			pam_permit.so

# and here are more per-package modules (the "Additional" block)
# end of pam-auth-update config
